# Задача: Создай класс `Task`, который позволяет управлять задачами (делами).
# У задачи должны быть атрибуты: описание задачи, срок выполнения и статус (выполнено/не выполнено). Реализуй функцию для добавления задач, отметки выполненных задач и вывода списка текущих (не выполненных) задач.
# *Дополнительное задание:
# Ты разрабатываешь программное обеспечение для сети магазинов.
# Каждый магазин в этой сети имеет свои особенности, но также существуют общие характеристики, такие как адрес, название и ассортимент товаров.
# Ваша задача — создать класс `Store`, который можно будет использовать для создания различных магазинов.


# --- Модуль управления задачами ---
# Определяем класс Task для представления отдельной задачи
class Task:
    # Конструктор, который создаёт задачу с описанием и сроком выполнения
    def __init__(self, description, deadline):
        # Сохраняем описание задачи
        self.description = description
        # Устанавливаем срок выполнения задачи
        self.deadline = deadline
        # Изначально задача не выполнена
        self.completed = False

    # Метод для отметки задачи как выполненной
    def mark_completed(self):
        # Меняем статус задачи на выполненный
        self.completed = True

    # Переопределяем метод __str__, чтобы удобно выводить информацию о задаче
    def __str__(self):
        # Если задача выполнена — пишем "Выполнено", иначе — "Не выполнено"
        status = "Выполнено" if self.completed else "Не выполнено"
        # Возвращаем строковое представление задачи
        return f"[{status}] {self.description} (До: {self.deadline})"

# Определяем класс TaskManager для управления списком задач
class TaskManager:
    # Конструктор, который создаёт пустой список задач
    def __init__(self):
        # Список всех задач
        self.tasks = []

    # Метод для добавления новой задачи
    def add_task(self, description, deadline):
        # Создаём новый объект Task
        task = Task(description, deadline)
        # Добавляем его в список задач
        self.tasks.append(task)

    # Метод для отметки задачи как выполненной по индексу
    def complete_task(self, index):
        # Проверяем, что индекс находится в допустимом диапазоне
        if 0 <= index < len(self.tasks):
            # Отмечаем задачу как выполненную
            self.tasks[index].mark_completed()
        else:
            # Если индекс неверный — выводим сообщение об ошибке
            print("Неверный индекс задачи.")

    # Метод для вывода списка текущих (не выполненных) задач
    def show_current_tasks(self):
        # Фильтруем список задач — берем только невыполненные
        current_tasks = [task for task in self.tasks if not task.completed]
        # Если таких задач нет — информируем пользователя
        if not current_tasks:
            print("Нет текущих задач.")
        else:
            # Выводим заголовок
            print("Текущие задачи:")
            # Перебираем и выводим каждую текущую задачу
            for i, task in enumerate(current_tasks):
                print(f"{i}. {task}")

# --- Модуль управления магазинами ---
# Определяем класс Store для представления магазина
class Store:
    # Конструктор, который создаёт магазин с названием и адресом
    def __init__(self, name, address):
        # Название магазина
        self.name = name
        # Адрес магазина
        self.address = address
        # Словарь товаров: ключ — название товара, значение — цена
        self.items = {}

    # Метод для добавления товара в ассортимент
    def add_item(self, item_name, price):
        # Добавляем товар в словарь по имени и цене
        self.items[item_name] = price

    # Метод для удаления товара из ассортимента
    def remove_item(self, item_name):
        # Проверяем, есть ли такой товар
        if item_name in self.items:
            # Если есть — удаляем
            del self.items[item_name]

    # Метод для получения цены товара по названию
    def get_item_price(self, item_name):
        # Возвращаем цену или None, если товара нет
        return self.items.get(item_name, None)

    # Метод для обновления цены товара
    def update_item_price(self, item_name, new_price):
        # Проверяем, существует ли товар
        if item_name in self.items:
            # Обновляем цену
            self.items[item_name] = new_price
        else:
            # Если товара нет — выводим сообщение
            print(f"Товар '{item_name}' не найден.")

    # Переопределяем метод __str__ для удобного вывода информации о магазине
    def __str__(self):
        # Возвращаем строку с названием и адресом магазина
        return f"Магазин '{self.name}' по адресу: {self.address}"

# --- Основная программа для тестирования ---

# Определяем функцию main(), которая запускается при старте программы
def main():
    # --- Тестирование TaskManager ---
    print("=== Управление задачами ===")
    # Создаём менеджер задач
    tm = TaskManager()

    # Добавляем несколько задач
    tm.add_task("Купить продукты", "2025-04-06")
    tm.add_task("Сделать презентацию", "2025-04-07")
    tm.add_task("Позвонить клиенту", "2025-04-08")

    # Выводим текущие задачи
    tm.show_current_tasks()

    # Отмечаем вторую задачу как выполненную
    tm.complete_task(1)
    print("\nПосле выполнения одной задачи:")
    # Снова выводим текущие задачи
    tm.show_current_tasks()

    # --- Тестирование Store ---
    print("\n\n=== Управление магазинами ===")

    # Создаём три разных магазина
    store1 = Store("Продуктовый дом", "ул. Ленина, д. 10")
    store2 = Store("Электроника плюс", "пр. Победы, д. 5")
    store3 = Store("Книги и журналы", "ул. Чехова, д. 12")

    # Добавляем товары в первый магазин
    store1.add_item("Хлеб", 30)
    store1.add_item("Молоко", 60)
    store1.add_item("Яйца", 90)

    # Добавляем товары во второй магазин
    store2.add_item("Телевизор", 35000)
    store2.add_item("Наушники", 1500)

    # Добавляем товары в третий магазин
    store3.add_item("Ромео и Джульетта", 450)
    store3.add_item("1984", 380)

    # Тестируем методы одного из магазинов
    print(f"\n{store2}")
    print("Тестирование методов магазина:")
    print("Цена телевизора:", store2.get_item_price("Телевизор"))
    store2.update_item_price("Телевизор", 32000)
    print("Обновленная цена телевизора:", store2.get_item_price("Телевизор"))
    store2.remove_item("Наушники")
    print("Цена наушников после удаления:", store2.get_item_price("Наушники"))

# Проверяем, запускается ли файл напрямую, а не импортируется как модуль
if __name__ == "__main__":
    # Запускаем основную программу
    main()


